@using MarketWB.Web.ViewModels.Cabinet.Dashboard
@{
    Layout = "_Layout";
}
@model DashboardExtraExpensesVM

<style>
    .table_input{
        width: 97%;
        padding: 0 !important;
        margin: 0 !important;
    }
</style>


    <div class="panel box-shadow-none content-header">
        <div class="panel-body">
            <div class="col-md-12">
                <h3 class="animated fadeInLeft">Дополнительные расходы</h3>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <div class="col-md-12 top-20 padding-0">
            <div class="col-md-12">
                <div class="panel">
                    <div class="panel-body">
                        <div class="responsive-table">
                            <table id="datatables-example" class="table table-striped table-bordered" width="100%" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th>Дата платежа</th>
                                        <th>Расчетный центр</th>
                                        <th>Статья</th>
                                        <th>Период</th>
                                        <th>Сумма</th>
                                        <th>Кому платим</th>
                                        <th>За что платим</th>
                                        <th>Комментарий</th>
                                        <th> </th>
                                         <div style="display:block;">
                                                <button onclick="CreateRow()" style="btn btn-primary">Добавить позицию</button>
                                                <button onclick="SaveRows()" style="btn btn-success">Сохранить</button>
                                        </div>
                                    </tr>
                                </thead>
                                <tbody id="table_body">
                                    @foreach(var selfCost in Model.User.ExtraExpenses)
                                    {
                                            <tr data-id="@selfCost.Id">
                                                <td><input class="table_input" type="datetime-local" style="padding:0;"  value="@selfCost.PaymentDate.ToString("yyyy-MM-ddThh:mm")"/></td>
                                                <td><input class="table_input" type="text"  style="padding:0;" value="@selfCost.ClearingCentre"/></td>
                                                <td><input class="table_input" type="text" style="padding:0;"  value="@selfCost.Category"/></td>
                                                <td><input class="table_input" type="datetime-local" style="padding:0;" value="@selfCost.Period.ToString("yyyy-MM-ddThh:mm")"/></td>
                                                <td><input class="table_input" type="number" style="padding:0;"  value="@selfCost.Sum"/></td>
                                                <td><input class="table_input" type="text" style="padding:0;"  value="@selfCost.PaymentReceiver"/></td>
                                                <td><input class="table_input" type="text" style="padding:0;" value="@selfCost.PaymentDescription"/></td>
                                                <td><input class="table_input" type="text" style="padding:0;" value="@selfCost.Comment"/></td>
                                                <td><a><button onclick="DeleteRow(@selfCost.Id)"  style="width:85%">Удалить</button></a></td>
                                            </tr> 
                                    }                                
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <script>
         async function CreateRow(){

               let response = await fetch('/Cabinet/Dashboard/AddExtraExpence', {
                   method: 'PUT',
               });
               let json =await response.json();

               var row = document.createElement('tr');
               row.setAttribute('data-id',json);
              
               let html = '';
               html += ` <td><input class="table_input" style="padding:0;" type="datetime-local"/></td>
                         <td><input class="table_input" style="padding:0;" type="text"/></td>
                         <td><input class="table_input" style="padding:0;" type="text"/></td>
                         <td><input class="table_input" style="padding:0;" type="datetime-local"/></td>
                         <td><input class="table_input" style="padding:0;" type="number"/></td>
                         <td><input class="table_input" style="padding:0;" type="text"/></td>
                         <td><input class="table_input" style="padding:0;" type="text"/></td>
                         <td><input class="table_input" style="padding:0;" type="text"/></td>
                         <td><a><button onclick="DeleteRow(0)" style="width:85%" >Удалить</button></a></td>`;

               row.innerHTML = html;

               let table_body = document.getElementById('table_body');
               table_body.prepend(row);
         }
    
         async function SaveRows(){

             let table_body = document.getElementById('table_body');
             let rows = table_body.children;
             for (let i =0;i<rows.length;i++){
                 let row = rows[i];
                 let cells = row.children;

                 let model = {
                          Id: new Number(row.getAttribute('data-id')),
                          PaymentDate: cells[0].children[0].value,
                          ClearingCentre: cells[1].children[0].value,
                          Category: cells[2].children[0].value,
                          Period: cells[3].children[0].value,
                          Sum: new Number(cells[4].children[0].value),
                          PaymentReceiver: cells[5].children[0].value,
                          PaymentDescription: cells[6].children[0].value,
                          Comment: cells[7].children[0].value,
                };

                let response = await fetch('/Cabinet/Dashboard/UpdateExtraExpence', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json;charset=utf-8'
                      },
                      body: JSON.stringify(model),
              });

            }
         }
         async function DeleteRow(id){

               let response = await fetch('/Cabinet/Dashboard/DeleteExtraExpence?id='+id, {
                   method: 'DELETE',
               });

             let table_body = document.getElementById('table_body');
             var row = document.querySelector('tr[data-id="'+id+'"]');
             table_body.removeChild(row);
         }
    </script>
