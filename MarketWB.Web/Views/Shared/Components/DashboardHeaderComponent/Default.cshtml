@using MarketWB.Web.ViewModels.Cabinet.Dashboard
@model AbsDashboardVM


       <div class="container">
      <div class="row">
            <div class="col-md-4 purpledrop">
                <div>
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle btnwb" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                            @if(Model.User.UserData.SelectedWBAPITokens.Count == 0)
                            {
                                <span>Ключ не выбран</span>
                            }
                            else if(Model.User.UserData.SelectedWBAPITokens.Count == Model.User.WBAPIKeys.Count)
                            {
                                <span>Выбраны все ключи</span>
                            }
                            else
                            {
                                <span>Выбрано ключей : @Model.User.UserData.SelectedWBAPITokens.Count </span>
                            }
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                          
                            @foreach (var token in Model.User.WBAPIKeys)
                            {
                              <li>
                                <a class="dropdown-item" href="#">
                                    <div class="content">
                                        <div class="lncont">
                                            <div class="name">@token.Name</div>
                                            <div class="lncheck">
                                                <input type="checkbox" data-id="@token.Id" onchange="setKeySelected(event)" @if(token.IsSelected){ @("checked") }  class="form-check-input check-dropdown" id="exampleCheck1">
                                            </div>
                                        </div>
                                        <div class="lninfo">
                                            <div class="apikey">@{
                                                    try
                                                    {
                                                        @(token.APIKey.Substring(0,20) + "...")
                                                    }
                                                    catch{
                                                        @("Неверный ключ API")
                                                    }
                                                }
                                                   &emsp;&emsp;&emsp;&emsp;&emsp; 
                                                @if(token.CreatedFirstTime && token.CreatedAt.AddMinutes(7) > DateTime.UtcNow)
                                                {
                                                     <span style="color: #2196F3;">(подготавливается)</span>
                                                }
                                            </div>
                                            <div class="interect">
                                                <div class="url"><i class="las la-link"></i></div>
                                                <div class="send"><i class="las la-external-link-alt"></i></div>
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            </li>
                            } 
                        </ul>
                    </div>
                </div>
            </div>
  
            <div class="col-md-4 purpledrop">
                <div>
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle btnwb" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                            @if(Model.User.UserData.SelectedWBBrand == null)
                            {
                                <span>Все бренды</span>
                            }
                            else
                            {
                               <span>@Model.User.UserData.SelectedWBBrand</span>
                            }
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                          @foreach(var brand in Model.Brands)
                          {
                             <li onclick="setBrandSelected('@brand.Brand')"><a class="dropdown-item" href="#">@brand.Brand</a></li>
                          }
                        </ul>
                    </div>
                </div>
            </div>
  
            <div class="col-md-4 purpledrop">
                <div>
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle btnwb" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                            @if(Model.User.UserData.SelectedWBCategory == null)
                            {
                                <span>Все категории</span>
                            }
                            else
                            {
                               <span>@Model.User.UserData.SelectedWBCategory</span>
                            }
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                           @foreach(var category in Model.Categories)
                           {
                              <li onclick="setCategorySelected('@category.Category')"><a class="dropdown-item" href="#">@category.Category</a></li>
                           }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    


    <script>
     


        async function setKeySelected(e){
             let checkbox = e.target;
             let response = await fetch('/WBKeys/SelectWBKey?keyId=' +checkbox.getAttribute("data-id")+ '&isChecked=' +checkbox.checked, {
                 method: 'PUT',
             });
             document.location.reload();
        }

        async function setBrandSelected(value){
             let response = await fetch('/WBKeys/SelectWBBrand?brand='+value, {
                 method: 'PUT',
             });
             document.location.reload();
        }
        async function setCategorySelected(value){
             let response = await fetch('/WBKeys/SelectWBCategory?category='+value, {
                  method: 'PUT',
              });
             document.location.reload();
        }

        async function setChangedPeriodFrom(event){
             var selectElement = event.target;
             var value = selectElement.value;
             let response = await fetch('/WBKeys/SetChangedPeriodFrom?period='+value, {
                 method: 'PUT',
              });
             document.location.reload();
        }
        async function setChangedPeriodTo(event){
             var selectElement = event.target;
             var value = selectElement.value;
             let response = await fetch('/WBKeys/SetChangedPeriodTo?period='+value, {
                  method: 'PUT',
             });
             document.location.reload();
        }


        async function setChangedPeriodFromDays(days){
              var rightNow = new Date();
              var to = rightNow.toISOString();
              rightNow.setDate(rightNow.getDate() - days);
              var from = rightNow.toISOString();

             let response = await fetch('/WBKeys/SetChangedPeriodTo?period='+to, {
                  method: 'PUT',
             });
             let response2 = await fetch('/WBKeys/SetChangedPeriodFrom?period='+from, {
                  method: 'PUT',
             });
             document.location.reload();
        }
          async function setChangedYesterdayPeriod(){
             let response = await fetch('/WBKeys/SetYesterdayPeriod', {
                  method: 'PUT',
             });
             document.location.reload();
        }

         async function setChangedWeekPeriod(){
             let response = await fetch('/WBKeys/SetWeekPeriod', {
                  method: 'PUT',
             });
             document.location.reload();
        }
           async function setChangedMonthPeriod(){
             let response = await fetch('/WBKeys/SetMonthPeriod', {
                  method: 'PUT',
             });
             document.location.reload();
        }
    </script>
   